/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TestThriftConnPoolService_H
#define TestThriftConnPoolService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "test_types.h"

namespace ww {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class TestThriftConnPoolServiceIf {
 public:
  virtual ~TestThriftConnPoolServiceIf() {}
  virtual int64_t Predict(const int64_t input) = 0;
};

class TestThriftConnPoolServiceIfFactory {
 public:
  typedef TestThriftConnPoolServiceIf Handler;

  virtual ~TestThriftConnPoolServiceIfFactory() {}

  virtual TestThriftConnPoolServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TestThriftConnPoolServiceIf* /* handler */) = 0;
};

class TestThriftConnPoolServiceIfSingletonFactory : virtual public TestThriftConnPoolServiceIfFactory {
 public:
  TestThriftConnPoolServiceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<TestThriftConnPoolServiceIf>& iface) : iface_(iface) {}
  virtual ~TestThriftConnPoolServiceIfSingletonFactory() {}

  virtual TestThriftConnPoolServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TestThriftConnPoolServiceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<TestThriftConnPoolServiceIf> iface_;
};

class TestThriftConnPoolServiceNull : virtual public TestThriftConnPoolServiceIf {
 public:
  virtual ~TestThriftConnPoolServiceNull() {}
  int64_t Predict(const int64_t /* input */) {
    int64_t _return = 0;
    return _return;
  }
};

typedef struct _TestThriftConnPoolService_Predict_args__isset {
  _TestThriftConnPoolService_Predict_args__isset() : input(false) {}
  bool input :1;
} _TestThriftConnPoolService_Predict_args__isset;

class TestThriftConnPoolService_Predict_args {
 public:

  TestThriftConnPoolService_Predict_args(const TestThriftConnPoolService_Predict_args&);
  TestThriftConnPoolService_Predict_args& operator=(const TestThriftConnPoolService_Predict_args&);
  TestThriftConnPoolService_Predict_args() : input(0) {
  }

  virtual ~TestThriftConnPoolService_Predict_args() throw();
  int64_t input;

  _TestThriftConnPoolService_Predict_args__isset __isset;

  void __set_input(const int64_t val);

  bool operator == (const TestThriftConnPoolService_Predict_args & rhs) const
  {
    if (!(input == rhs.input))
      return false;
    return true;
  }
  bool operator != (const TestThriftConnPoolService_Predict_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TestThriftConnPoolService_Predict_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TestThriftConnPoolService_Predict_pargs {
 public:


  virtual ~TestThriftConnPoolService_Predict_pargs() throw();
  const int64_t* input;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TestThriftConnPoolService_Predict_result__isset {
  _TestThriftConnPoolService_Predict_result__isset() : success(false) {}
  bool success :1;
} _TestThriftConnPoolService_Predict_result__isset;

class TestThriftConnPoolService_Predict_result {
 public:

  TestThriftConnPoolService_Predict_result(const TestThriftConnPoolService_Predict_result&);
  TestThriftConnPoolService_Predict_result& operator=(const TestThriftConnPoolService_Predict_result&);
  TestThriftConnPoolService_Predict_result() : success(0) {
  }

  virtual ~TestThriftConnPoolService_Predict_result() throw();
  int64_t success;

  _TestThriftConnPoolService_Predict_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const TestThriftConnPoolService_Predict_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TestThriftConnPoolService_Predict_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TestThriftConnPoolService_Predict_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TestThriftConnPoolService_Predict_presult__isset {
  _TestThriftConnPoolService_Predict_presult__isset() : success(false) {}
  bool success :1;
} _TestThriftConnPoolService_Predict_presult__isset;

class TestThriftConnPoolService_Predict_presult {
 public:


  virtual ~TestThriftConnPoolService_Predict_presult() throw();
  int64_t* success;

  _TestThriftConnPoolService_Predict_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class TestThriftConnPoolServiceClient : virtual public TestThriftConnPoolServiceIf {
 public:
  TestThriftConnPoolServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TestThriftConnPoolServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int64_t Predict(const int64_t input);
  void send_Predict(const int64_t input);
  int64_t recv_Predict();
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TestThriftConnPoolServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<TestThriftConnPoolServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TestThriftConnPoolServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_Predict(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TestThriftConnPoolServiceProcessor(::apache::thrift::stdcxx::shared_ptr<TestThriftConnPoolServiceIf> iface) :
    iface_(iface) {
    processMap_["Predict"] = &TestThriftConnPoolServiceProcessor::process_Predict;
  }

  virtual ~TestThriftConnPoolServiceProcessor() {}
};

class TestThriftConnPoolServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TestThriftConnPoolServiceProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< TestThriftConnPoolServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< TestThriftConnPoolServiceIfFactory > handlerFactory_;
};

class TestThriftConnPoolServiceMultiface : virtual public TestThriftConnPoolServiceIf {
 public:
  TestThriftConnPoolServiceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<TestThriftConnPoolServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TestThriftConnPoolServiceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<TestThriftConnPoolServiceIf> > ifaces_;
  TestThriftConnPoolServiceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<TestThriftConnPoolServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int64_t Predict(const int64_t input) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Predict(input);
    }
    return ifaces_[i]->Predict(input);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class TestThriftConnPoolServiceConcurrentClient : virtual public TestThriftConnPoolServiceIf {
 public:
  TestThriftConnPoolServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TestThriftConnPoolServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int64_t Predict(const int64_t input);
  int32_t send_Predict(const int64_t input);
  int64_t recv_Predict(const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
